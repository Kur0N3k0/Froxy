package proxy

import (
	"net"
	"net/http"

	"github.com/fasthttp/websocket"
	"github.com/valyala/fasthttp"
)

func init() {
	root.cacrt = []byte(`__CA_CRT__`)
	root.cakey = []byte(`__CA_KEY__`)
	root.certkey = []byte(`__CERT_KEY__`)
}

func RunProxy(addr string, cb func(ProxyHistory), flog func(string)) {
	callback = cb
	clog = flog

	handler := func(ctx *fasthttp.RequestCtx) {
		ctxHost := string(ctx.Host())
		host, port := getHostAndPort(ctxHost, ctx.IsTLS())

		if net.ParseIP(host).IsLoopback() && port == "9505" {
			handleLocalhost(ctx)
			return
		}

		if websocket.FastHTTPIsWebSocketUpgrade(ctx) {
			clog("Websocket")
			handleWebSocket(ctx)
			return
		}

		if string(ctx.Method()) == http.MethodConnect {
			handleTunneling(ctx)
		} else {
			handleHTTP(ctx)
		}
	}

	// server := &fasthttp.Server{
	// 	Handler: handler,
	// 	TLSConfig: &tls.Config{
	// 		InsecureSkipVerify: true,
	// 	},
	// }

	// http2.ConfigureServer(server, http2.ServerConfig{})
	fasthttp.ListenAndServe(":9505", handler)
}
